//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `Call`.
    static let call = Rswift.ImageResource(bundle: R.hostingBundle, name: "Call")
    /// Image `Chat`.
    static let chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "Chat")
    /// Image `CheckMark`.
    static let checkMark = Rswift.ImageResource(bundle: R.hostingBundle, name: "CheckMark")
    /// Image `UncheckMark`.
    static let uncheckMark = Rswift.ImageResource(bundle: R.hostingBundle, name: "UncheckMark")
    /// Image `UserImage1`.
    static let userImage1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "UserImage1")
    /// Image `UserImage`.
    static let userImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "UserImage")
    /// Image `delivery-truck`.
    static let deliveryTruck = Rswift.ImageResource(bundle: R.hostingBundle, name: "delivery-truck")
    
    /// `UIImage(named: "Call", bundle: ..., traitCollection: ...)`
    static func call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.call, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Chat", bundle: ..., traitCollection: ...)`
    static func chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CheckMark", bundle: ..., traitCollection: ...)`
    static func checkMark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkMark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "UncheckMark", bundle: ..., traitCollection: ...)`
    static func uncheckMark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uncheckMark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "UserImage", bundle: ..., traitCollection: ...)`
    static func userImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "UserImage1", bundle: ..., traitCollection: ...)`
    static func userImage1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userImage1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "delivery-truck", bundle: ..., traitCollection: ...)`
    static func deliveryTruck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deliveryTruck, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `RequestDetail`.
    static let requestDetail = _R.storyboard.requestDetail()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "RequestDetail", bundle: ...)`
    static func requestDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.requestDetail)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 9 localization keys.
    struct localizable {
      /// Value: Arrived
      static let arrived = Rswift.StringResource(key: "Arrived", tableName: "localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Call is not supported
      static let callIsNotSupported = Rswift.StringResource(key: "Call is not supported", tableName: "localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel Work
      static let cancelWork = Rswift.StringResource(key: "Cancel Work", tableName: "localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Close
      static let close = Rswift.StringResource(key: "Close", tableName: "localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Coming Soon
      static let comingSoon = Rswift.StringResource(key: "Coming Soon", tableName: "localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Completed
      static let completed = Rswift.StringResource(key: "Completed", tableName: "localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Dispatched
      static let dispatched = Rswift.StringResource(key: "Dispatched", tableName: "localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let okay = Rswift.StringResource(key: "Okay", tableName: "localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Work in Progress
      static let workInProgress = Rswift.StringResource(key: "Work in Progress", tableName: "localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Arrived
      static func arrived(_: Void = ()) -> String {
        return NSLocalizedString("Arrived", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Call is not supported
      static func callIsNotSupported(_: Void = ()) -> String {
        return NSLocalizedString("Call is not supported", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel Work
      static func cancelWork(_: Void = ()) -> String {
        return NSLocalizedString("Cancel Work", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Close
      static func close(_: Void = ()) -> String {
        return NSLocalizedString("Close", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Coming Soon
      static func comingSoon(_: Void = ()) -> String {
        return NSLocalizedString("Coming Soon", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Completed
      static func completed(_: Void = ()) -> String {
        return NSLocalizedString("Completed", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Dispatched
      static func dispatched(_: Void = ()) -> String {
        return NSLocalizedString("Dispatched", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OK
      static func okay(_: Void = ()) -> String {
        return NSLocalizedString("Okay", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Work in Progress
      static func workInProgress(_: Void = ()) -> String {
        return NSLocalizedString("Work in Progress", tableName: "localizable", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try requestDetail.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct requestDetail: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "RequestDetail"
      let requestDetailViewController = StoryboardViewControllerResource<RequestDetailViewController>(identifier: "RequestDetailViewController")
      
      func requestDetailViewController(_: Void = ()) -> RequestDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: requestDetailViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Call", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Call' is used in storyboard 'RequestDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Chat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Chat' is used in storyboard 'RequestDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "UncheckMark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'UncheckMark' is used in storyboard 'RequestDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "UserImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'UserImage' is used in storyboard 'RequestDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "UserImage1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'UserImage1' is used in storyboard 'RequestDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "delivery-truck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delivery-truck' is used in storyboard 'RequestDetail', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.requestDetail().requestDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'requestDetailViewController' could not be loaded from storyboard 'RequestDetail' as 'RequestDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
